{"is_source_file": true, "format": "Python", "description": "This file appears to be a main script for a JSON schema and code generation tool. It imports several custom modules, handles command line arguments, processes JSON schemas, and generates source code or documentation accordingly.", "external_files": ["jsonref", "logger", "config", "code_generator", "documentation_generator", "json_loader", "header_loader", "trackers"], "external_methods": ["config.Parse", "logger.Create", "trackers.SetLogger", "json_loader.SetLogger", "json_loader.Load", "code_generator.Create", "code_generator.CreateApiHeader", "documentation_generator.Create", "log.Header", "log.Warn", "log.Error", "log.Info"], "published": [], "classes": [], "methods": [{"name": "main", "description": "Entry point of the script that handles command line arguments, processes JSON schema files, and triggers code/documentation generation."}], "calls": ["config.Parse", "logger.Create", "trackers.SetLogger", "json_loader.SetLogger", "json_loader.Load", "code_generator.Create", "code_generator.CreateApiHeader", "documentation_generator.Create", "log.Header", "log.Warn", "log.Error", "log.Info"], "search-terms": ["JsonGenerator", "JSON schema processing", "code generation", "Python main script", "JSON-RPC documentation"], "state": 2, "file_id": 18, "knowledge_revision": 529, "git_revision": "19b22d4285ae31d1212bd73fafb23be01bd456ba", "ctags": [{"_type": "tag", "name": "NAME", "path": "/home/kavia/workspace/code-generation/app-gateway/dependencies/install/sbin/JsonGenerator/JsonGenerator.py", "pattern": "/^NAME = \"JsonGenerator\"$/", "language": "Python", "kind": "variable"}, {"_type": "tag", "name": "additional_includes", "path": "/home/kavia/workspace/code-generation/app-gateway/dependencies/install/sbin/JsonGenerator/JsonGenerator.py", "pattern": "/^                schemas, additional_includes, temp_files = json_loader.Load(log, path, args.if_d/", "language": "Python", "kind": "variable"}, {"_type": "tag", "name": "argparser", "path": "/home/kavia/workspace/code-generation/app-gateway/dependencies/install/sbin/JsonGenerator/JsonGenerator.py", "pattern": "/^    argparser, args = config.Parse(sys.argv)$/", "language": "Python", "kind": "variable"}, {"_type": "tag", "name": "args", "path": "/home/kavia/workspace/code-generation/app-gateway/dependencies/install/sbin/JsonGenerator/JsonGenerator.py", "pattern": "/^    argparser, args = config.Parse(sys.argv)$/", "language": "Python", "kind": "variable"}, {"_type": "tag", "name": "cpp_output_path", "path": "/home/kavia/workspace/code-generation/app-gateway/dependencies/install/sbin/JsonGenerator/JsonGenerator.py", "pattern": "/^                                cpp_output_path = os.path.normpath(args.cpp_output_dir)$/", "language": "Python", "kind": "variable"}, {"_type": "tag", "name": "headers", "path": "/home/kavia/workspace/code-generation/app-gateway/dependencies/install/sbin/JsonGenerator/JsonGenerator.py", "pattern": "/^                            headers = code_generator.Create(log, schema, path, [output_path, cpp/", "language": "Python", "kind": "variable"}, {"_type": "tag", "name": "joint_headers", "path": "/home/kavia/workspace/code-generation/app-gateway/dependencies/install/sbin/JsonGenerator/JsonGenerator.py", "pattern": "/^                joint_headers = {}$/", "language": "Python", "kind": "variable"}, {"_type": "tag", "name": "log", "path": "/home/kavia/workspace/code-generation/app-gateway/dependencies/install/sbin/JsonGenerator/JsonGenerator.py", "pattern": "/^    log = logger.Create(NAME, args.verbose, not args.no_warnings, not args.no_style_warnings)$/", "language": "Python", "kind": "variable"}, {"_type": "tag", "name": "name", "path": "/home/kavia/workspace/code-generation/app-gateway/dependencies/install/sbin/JsonGenerator/JsonGenerator.py", "pattern": "/^                            name = os.path.basename(path).replace(\".h\", \"\").replace(\".json\", \"\")$/", "language": "Python", "kind": "variable"}, {"_type": "tag", "name": "output_path", "path": "/home/kavia/workspace/code-generation/app-gateway/dependencies/install/sbin/JsonGenerator/JsonGenerator.py", "pattern": "/^                                output_path = os.path.normpath(args.output_dir)$/", "language": "Python", "kind": "variable"}, {"_type": "tag", "name": "schemas", "path": "/home/kavia/workspace/code-generation/app-gateway/dependencies/install/sbin/JsonGenerator/JsonGenerator.py", "pattern": "/^                schemas, additional_includes, temp_files = json_loader.Load(log, path, args.if_d/", "language": "Python", "kind": "variable"}, {"_type": "tag", "name": "temp_files", "path": "/home/kavia/workspace/code-generation/app-gateway/dependencies/install/sbin/JsonGenerator/JsonGenerator.py", "pattern": "/^                schemas, additional_includes, temp_files = json_loader.Load(log, path, args.if_d/", "language": "Python", "kind": "variable"}, {"_type": "tag", "name": "temp_files", "path": "/home/kavia/workspace/code-generation/app-gateway/dependencies/install/sbin/JsonGenerator/JsonGenerator.py", "pattern": "/^    temp_files = [] # Track temporary files the procedure may create$/", "language": "Python", "kind": "variable"}, {"_type": "tag", "name": "title", "path": "/home/kavia/workspace/code-generation/app-gateway/dependencies/install/sbin/JsonGenerator/JsonGenerator.py", "pattern": "/^                                    title = schema[\"info\"][\"title\"] if \"title\" in schema[\"info\"]/", "language": "Python", "kind": "variable"}, {"_type": "tag", "name": "warnings", "path": "/home/kavia/workspace/code-generation/app-gateway/dependencies/install/sbin/JsonGenerator/JsonGenerator.py", "pattern": "/^                        warnings = config.GENERATED_JSON$/", "language": "Python", "kind": "variable"}], "hash": "3150171332ae15c23f1e17cd0f32e98d", "format-version": 4, "code-base-name": "app-gateway", "filename": "dependencies/install/sbin/JsonGenerator/JsonGenerator.py", "fields": [{"name": "NAME = \"JsonGenerator\"", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "schemas, additional_includes, temp_files = json_loader.Load(log, path, args.if_d/", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "argparser, args = config.Parse(sys.argv)", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "cpp_output_path = os.path.normpath(args.cpp_output_dir)", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "headers = code_generator.Create(log, schema, path, [output_path, cpp/", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "joint_headers = {}", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "log = logger.Create(NAME, args.verbose, not args.no_warnings, not args.no_style_warnings)", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "name = os.path.basename(path).replace(\".h\", \"\").replace(\".json\", \"\")", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "output_path = os.path.normpath(args.output_dir)", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "temp_files = [] # Track temporary files the procedure may create", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "title = schema[\"info\"][\"title\"] if \"title\" in schema[\"info\"]/", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "warnings = config.GENERATED_JSON", "scope": "", "scopeKind": "", "description": "unavailable"}], "revision_history": [{"529": "19b22d4285ae31d1212bd73fafb23be01bd456ba"}]}